# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo01_菜单的功能实现.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(800, 600)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        MainWindow.setCentralWidget(self.centralwidget)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        # 添加菜单栏
        self.menuBar = QtWidgets.QMenuBar(MainWindow)
        self.menuBar.setGeometry(QtCore.QRect(0, 0, 800, 26))
        self.menuBar.setObjectName("menuBar")
        # 添加文件菜单
        self.menu = QtWidgets.QMenu(self.menuBar)
        self.menu.setObjectName("menu")
        # 添加编辑菜单
        self.menu_2 = QtWidgets.QMenu(self.menuBar)
        self.menu_2.setObjectName("menu_2")
        MainWindow.setMenuBar(self.menuBar)
        # 添加新建菜单
        self.action1 = QtWidgets.QAction(MainWindow)
        self.action1.setObjectName("action1")
        # 为菜单设置图标
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../image/new.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action1.setIcon(icon)
        # 设置菜单为Windows快捷键
        self.action1.setShortcut(QtCore.Qt.WindowShortcut)
        # 设置图标可见
        self.action1.setIconVisibleInMenu(True)
        # 设置图标文本
        self.action1.setIconText("新建")
        # 设置提示文本
        self.action1.setToolTip("新建")
        # 设置快捷键
        self.action1.setShortcut("Ctrl+N")
        # 添加打开菜单
        self.action2 = QtWidgets.QAction(MainWindow)
        self.action2.setObjectName("action2")
        # 为菜单设置图标
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap("../image/open.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action2.setIcon(icon1)
        # 设置图标文本
        self.action2.setIconText("打开")
        # 设置提示文本
        self.action2.setToolTip("打开")
        # 设置快捷键
        self.action2.setShortcut("Ctrl+O")
        # 添加关闭菜单
        self.action3 = QtWidgets.QAction(MainWindow)
        self.action3.setObjectName("action3")
        # 为菜单设置图标
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap("../image/close.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.action3.setIcon(icon2)
        # 设置图标文本
        self.action3.setIconText("关闭")
        # 设置提示文本
        self.action3.setToolTip("关闭")
        # 设置快捷键
        self.action3.setShortcut("Ctrl+M")
        self.menu.addAction(self.action1)
        self.menu.addAction(self.action2)
        self.menu.addSeparator()
        self.menu.addAction(self.action3)
        self.menuBar.addAction(self.menu.menuAction())
        self.menuBar.addAction(self.menu_2.menuAction())

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 为菜单中的QAction绑定triggered信号
        self.menu.triggered[QtWidgets.QAction].connect(self.getmenu)

    def getmenu(self, m):
        from PyQt5.QtWidgets import QMessageBox
        QMessageBox.information(MainWindow, "提示", "您选择的是" + m.text(), QMessageBox.Ok)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.menu.setTitle(_translate("MainWindow", "文件"))
        self.menu_2.setTitle(_translate("MainWindow", "编辑"))
        self.action1.setText(_translate("MainWindow", "新建(&N)"))
        self.action2.setText(_translate("MainWindow", "打开(&O)"))
        self.action3.setText(_translate("MainWindow", "关闭(&C)"))


import sys

if __name__ == '__main__':
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()  # 创建窗口对象
    ui = Ui_MainWindow()  # 创建PyQt设计的窗体对象
    ui.setupUi(MainWindow)  # 调用PyQt窗体的方法对窗体对象进行初始化设置
    MainWindow.show()  # 显示窗体
    sys.exit(app.exec_())  # 程序关闭时退出进程
