import pandas as pd
import time
import csv
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import AdaBoostClassifier
from sklearn.metrics import accuracy_score
import warnings
warnings.filterwarnings("ignore")


subtrainLabel = pd.read_csv('../CSV/trainLabels.csv')
subtrainfeature = pd.read_csv("../CSV/All3gramfeature.csv")
subtrain = pd.merge(subtrainLabel,subtrainfeature,on='Id')
labels = subtrain.Class
subtrain.drop(["Class","Id"], axis=1, inplace=True)
subtrain = subtrain.values
data = open('../CSV/classification_text.csv', 'a')

# 打开CSV文件以供写入
with open('../CSV/paint_text.csv', 'a', newline='') as csvfile:
    csvwriter = csv.writer(csvfile)
    csvwriter.writerow(["分类算法", "accuracy"])
    # 进行20次的分类任务，并记录每次分类的结果到一个文件
    for i in range(20):
        X_train, X_test, y_train, y_test = train_test_split(subtrain, labels, test_size=0.4)

        print('%d st classisfication start' % (i))
        print('%d st classisfication ' % (i), file=data)
        start = time.perf_counter()

        print('决策树', file=data)
        clf = DecisionTreeClassifier(random_state=11)
        clf.fit(X_train, y_train)
        predictions = clf.predict(X_test)
        print(classification_report(y_test, predictions, digits=4), file=data)
        csvwriter.writerow(["决策树",accuracy_score(y_test, predictions)])

        print('逻辑回归', file=data)
        clf = LogisticRegression()
        clf.fit(X_train, y_train)
        predictions = clf.predict(X_test)
        print(classification_report(y_test, predictions, digits=4), file=data)
        csvwriter.writerow(["逻辑回归",accuracy_score(y_test, predictions)])

        print('KNN近邻', file=data)
        clf = KNeighborsClassifier(n_neighbors=3)
        clf.fit(X_train, y_train)
        predictions = clf.predict(X_test)
        print(classification_report(y_test, predictions, digits=4), file=data)
        csvwriter.writerow(["KNN近邻",accuracy_score(y_test, predictions)])

        print('AdaBoost', file=data)
        clf = AdaBoostClassifier(base_estimator=DecisionTreeClassifier(max_depth=5))
        clf.fit(X_train, y_train)
        predictions = clf.predict(X_test)  # 模型预测
        print(classification_report(y_test, predictions, digits=4), file=data)
        csvwriter.writerow(["AdaBoost",accuracy_score(y_test, predictions)])

        print('随机森林', file=data)
        clf = RandomForestClassifier(n_estimators=10, random_state=11)
        clf.fit(X_train, y_train)
        predictions = clf.predict(X_test)
        print(classification_report(y_test, predictions, digits=4), file=data)
        csvwriter.writerow(["随机森林",accuracy_score(y_test, predictions)])

        end = time.perf_counter()
        print('%d time:' % (i), end - start, file=data)
        print('time:', end - start)
        print('%d st classisfication end' % (i))
        break

data.close()
