# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo05_按文件存储知乎奇葩问题.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QFileDialog, QTableWidgetItem
from PyQt5.QtCore import QFile, QFileInfo, QIODevice, QTextStream
import os
import datetime


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(602, 584)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(0, 0, 601, 221))
        self.groupBox.setObjectName("groupBox")
        self.lineEdit = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit.setGeometry(QtCore.QRect(90, 40, 321, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.label = QtWidgets.QLabel(self.groupBox)
        self.label.setGeometry(QtCore.QRect(0, 40, 111, 41))
        self.label.setObjectName("label")
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        self.label_2.setGeometry(QtCore.QRect(0, 120, 111, 41))
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.groupBox)
        self.lineEdit_2.setGeometry(QtCore.QRect(120, 120, 291, 41))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton = QtWidgets.QPushButton(self.groupBox)
        self.pushButton.setGeometry(QtCore.QRect(460, 40, 93, 41))
        self.pushButton.setObjectName("pushButton")
        self.pushButton_2 = QtWidgets.QPushButton(self.groupBox)
        self.pushButton_2.setGeometry(QtCore.QRect(460, 120, 93, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(0, 220, 601, 311))
        self.tableWidget.setObjectName("tableWidget")
        #设置列数
        self.tableWidget.setColumnCount(2)
        #设置第一列的标题
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item=self.tableWidget.horizontalHeaderItem(0)
        item.setText('文件名')
        #设置第二列的标题
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(1, item)
        item = self.tableWidget.horizontalHeaderItem(1)
        item.setText('文件大小')
        #设置第一列的宽度
        self.tableWidget.setColumnWidth(0, 100)
        #设置最后一列自动填充容器
        self.tableWidget.horizontalHeader().setStretchLastSection(True)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 602, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # 为选择按钮绑定事件
        self.pushButton.clicked.connect(self.select_file)
        # 为创建按钮绑定事件
        self.pushButton_2.clicked.connect(self.create_file)

    # 选择文件并显示在文本框中
    def select_file(self):
        # 创建文件对话框
        dir = QFileDialog()
        # 设置初始路径为C盘
        dir.setDirectory('C:/')
        # 设置只显示文本文件
        dir.setNameFilter('Text Files(*.txt)')
        # 判断是否选择了文件
        if dir.exec():
            # 将选择的文件显示在文本框中
            self.lineEdit.setText(dir.selectedFiles()[0])

    # 选择路径，根据日期创建文件，并写入选择的文件中的文本
    def create_file(self):
        try:
            # 记录创建路径
            path = self.lineEdit_2.text()
            # 判断路径不能为空
            if self.lineEdit_2.text() != '':
                # 定义列表，用来按行记录选择的文件中的文本
                list = []
                # 创建QFile文件对象
                file = QFile(self.lineEdit.text())
                # 以只读方式打开文件
                if file.open(QIODevice.ReadOnly):
                    # 创建文本流
                    read = QTextStream(file)
                    # 设置写入编码
                    read.setCodec('UTF-8')
                    # 如果未读取完
                    while not read.atEnd():
                        # 将读取的文本添加到列表中
                        list.append(read.readLine())
                # 判断要创建的文件的路径是否存在，没有则创建文件夹
                if not os.path.exists(path):
                    os.makedirs(path)
                # 遍历已经记录的文本数据列表
                for i in range(len(list)):
                    # 获取当前日期，用来作为文件名
                    mytime = str(datetime.datetime.utcnow().strftime('%Y%m%d%H%M%S'))
                    # 在指定路径下创建txt文本文件
                    files = path + mytime + str(i) + '.txt'
                    # 创建QFile文件对象
                    file = QFile(files)
                    # 以读写和文本模式打开文件
                    file.open(QIODevice.ReadWrite | QIODevice.Text)
                    # 向文件中写入数据
                    file.write(bytes(list[i].encode('UTF-8')))
                    # 关闭文件
                    file.close()
                # 遍历文件夹
                filelist = os.listdir(path)
                # 定义标识，用来指定在表格中的哪行插入数据
                flag = 0
                # 遍历文件列表
                for f in filelist:
                    # 创建对象，用来获取文件信息
                    file = QFileInfo(f)
                    # 判断是否为.txt文件
                    if file.fileName().endswith('.txt'):
                        # 在表格中插入一行
                        self.tableWidget.insertRow(flag)
                        # 设置第一列的值为文件名
                        self.tableWidget.setItem(flag, 0, QTableWidgetItem(file.fileName()))
                        # 设置第二列的值为文件大小
                        self.tableWidget.setItem(flag, 1, QTableWidgetItem(str(file.size()) + 'B'))
                        # 标识加1
                        flag += 1
        except Exception as e:
            print(e)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.groupBox.setTitle(_translate("MainWindow", "基础设置"))
        self.label.setText(_translate("MainWindow", "选择文件："))
        self.label_2.setText(_translate("MainWindow", "输入创建路径："))
        self.pushButton.setText(_translate("MainWindow", "选择"))
        self.pushButton_2.setText(_translate("MainWindow", "创建"))

# 主函数
if __name__ == '__main__':
    import sys
    # 创建应用程序和对象
    app = QtWidgets.QApplication(sys.argv)
    # 创建窗口
    mainWindow = QtWidgets.QMainWindow()
    # 创建对象
    ui = Ui_MainWindow()
    # 调用初始化方法
    ui.setupUi(mainWindow)
    # 显示窗口
    mainWindow.show()
    # 等待窗口停止，退出操作
    sys.exit(app.exec_())