# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'demo06_使用GDir遍历、重命名和删除文件夹.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import QDir
import os


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(817, 481)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(0, 20, 91, 41))
        self.label.setObjectName("label")
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setGeometry(QtCore.QRect(80, 20, 581, 41))
        self.lineEdit.setObjectName("lineEdit")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton.setGeometry(QtCore.QRect(700, 20, 93, 41))
        self.pushButton.setObjectName("pushButton")
        self.tableWidget = QtWidgets.QTableWidget(self.centralwidget)
        self.tableWidget.setGeometry(QtCore.QRect(0, 70, 811, 291))
        self.tableWidget.setObjectName("tableWidget")
        self.tableWidget.setColumnCount(1)
        item = QtWidgets.QTableWidgetItem()
        self.tableWidget.setHorizontalHeaderItem(0, item)
        item = self.tableWidget.horizontalHeaderItem(0)
        item.setText("路径")
        # 隐藏垂直标题栏
        self.tableWidget.verticalHeader().setVisible(False)
        # 设置自动填充容器
        self.tableWidget.horizontalHeader().setSectionResizeMode(QtWidgets.QHeaderView.Stretch)
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        self.label_2.setGeometry(QtCore.QRect(0, 370, 141, 41))
        self.label_2.setObjectName("label_2")
        self.lineEdit_2 = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit_2.setGeometry(QtCore.QRect(140, 370, 401, 41))
        self.lineEdit_2.setObjectName("lineEdit_2")
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_2.setGeometry(QtCore.QRect(580, 370, 93, 41))
        self.pushButton_2.setObjectName("pushButton_2")
        self.pushButton_3 = QtWidgets.QPushButton(self.centralwidget)
        self.pushButton_3.setGeometry(QtCore.QRect(700, 370, 93, 41))
        self.pushButton_3.setObjectName("pushButton_3")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 817, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.pushButton.clicked.connect(self.getpath)
        self.pushButton_2.clicked.connect(self.rename)
        self.pushButton_3.clicked.connect(self.delete)
        self.tableWidget.itemClicked.connect(self.getItem)

    # 获取选中的表格内容
    def getItem(self, item):
        self.select = item.text()

    # 获取指定路径下的所有文件夹
    def getpath(self):
        # 清空表格中的所有行
        self.tableWidget.setRowCount(0)
        # 记录输入的路径
        path = self.lineEdit.text()
        # 判断路径不为空
        if path != "":
            # 创建GDir对象
            dir = QDir(path)
            # 判断路径是否存在
            if not dir.exists(path):
                # 创建文件夹
                dir.mkpath(path)
            # 创建QDir对象
            dir = QDir(path)
            # 定义标识，用来指定在表格中的哪行插入数据
            flag = 0
            # 遍历指定路径下的所有子文件夹
            for d in dir.entryList(QDir.Dirs | QDir.NoDotAndDotDot):
                # 在表格中插入一行
                self.tableWidget.insertRow(flag)
                # 设置第一列的值为文件夹全路径(包括文件夹名)
                self.tableWidget.setItem(flag, 0, QtWidgets.QTableWidgetItem(os.path.join(path, d)))
                # 标识加1
                flag += 1

    # 重命名文件夹
    def rename(self):
        # 记录新文件夹名
        newname = self.lineEdit_2.text()
        # 判断新文件夹名不为空
        if newname != "":
            # 判断是否选择了要重命名的文件夹
            if self.select != "":
                # 创建QDir对象
                dir = QDir()
                # 重命名文件夹
                dir.rename(self.select, os.path.join(self.lineEdit.text(), newname))
                QtWidgets.QMessageBox.information(MainWindow, "提示", "重命名成功！")
                # 重新获取指定路径下的所有文件夹
                self.getpath()

    # 删除文件夹
    def delete(self):
        # 判断是否选择了要删除的文件夹
        if self.select != "":
            # 创建QDir对象
            dir = QDir(self.select)
            # 删除文件夹
            dir.rmdir(self.select)
            QtWidgets.QMessageBox.information(MainWindow, "提示", "删除成功！")
            # 重新获取指定路径下的所有文件夹
            self.getpath()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.label.setText(_translate("MainWindow", "输入路径："))
        self.pushButton.setText(_translate("MainWindow", "确定"))
        self.label_2.setText(_translate("MainWindow", "设置新文件夹名称："))
        self.pushButton_2.setText(_translate("MainWindow", "重命名"))
        self.pushButton_3.setText(_translate("MainWindow", "删除"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
